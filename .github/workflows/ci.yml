name: CI/CD

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v2
    
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build
      run: npm run build
      
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v1.2
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}


# ============================================================
# CI/CD WORKFLOW EXPLANATION
# ============================================================
#
# This workflow sets up an automated testing and deployment pipeline for the MovieMate app.
# It does two main things:
#
# 1. TESTING APPROACH:
#    - Automatically runs whenever code is pushed to main/development branches or when pull requests are opened
#    - Sets up a fresh Ubuntu environment with Node.js 18
#    - Runs code quality checks:
#      * "npm ci" - Installs exact dependencies from package-lock.json
#      * "npm run lint" - Checks code style and potential errors using ESLint
#      * "npm test" - Runs automated tests using Vitest to verify app functionality
#
# 2. DEPLOYMENT PROCESS:
#    - Only triggers when the testing job succeeds AND the changes are on the main branch
#    - Builds the production version of the app ("npm run build")
#    - Automatically deploys to Netlify using secure credentials stored in GitHub secrets
#    - The deploy directory "./dist" contains the optimized, production-ready application
#
# BENEFITS:
# - Catches errors early before they reach production
# - Ensures code quality standards are maintained
# - Automates the deployment process to eliminate manual steps
# - Creates consistency between development and production environments
#
# This setup follows industry best practices by separating testing from deployment
# and ensuring that only properly tested code reaches the production environment.